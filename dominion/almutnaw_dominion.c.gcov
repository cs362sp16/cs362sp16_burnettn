        -:    0:Source:almutnaw_dominion.c
        -:    0:Graph:almutnaw_dominion.gcno
        -:    0:Data:almutnaw_dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      180:    8:int compare(const void* a, const void* b) {
      180:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      180:   11:  if (*(int*)a < *(int*)b)
       48:   12:    return -1;
      132:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        8:   44:  SelectStream(1);
        8:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        8:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        1:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       68:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      681:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      620:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
        1:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        6:   73:  if (numPlayers == 2)
        -:   74:    {
        6:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        6:   87:  if (numPlayers == 2)
        -:   88:    {
        6:   89:      state->supplyCount[estate] = 8;
        6:   90:      state->supplyCount[duchy] = 8;
        6:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        6:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:  state->supplyCount[silver] = 40;
        6:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      930:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       54:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       60:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      870:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       36:  143:	  state->deck[i][j] = estate;
       36:  144:	  state->deckCount[i]++;
        -:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       84:  148:	  state->deck[i][j] = copper;
       84:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       12:  166:      state->handCount[i] = 0;
       12:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      162:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        6:  182:  state->outpostPlayed = 0;
        6:  183:  state->phase = 0;
        6:  184:  state->numActions = 1;
        6:  185:  state->numBuys = 1;
        6:  186:  state->playedCardCount = 0;
        6:  187:  state->whoseTurn = 0;
        6:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
       30:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
        6:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:  return 0;
        -:  199:}
        -:  200:
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       12:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       12:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
       12:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      144:  214:  while (state->deckCount[player] > 0) {
      120:  215:    card = floor(Random() * state->deckCount[player]);
      120:  216:    newDeck[newDeckPos] = state->deck[player][card];
      120:  217:    newDeckPos++;
      372:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
      252:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      120:  221:    state->deckCount[player]--;
        -:  222:  }
      132:  223:  for (i = 0; i < newDeckPos; i++) {
      120:  224:    state->deck[player][i] = newDeck[i];
      120:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       12:  228:  return 0;
        -:  229:}
        -:  230:
        1:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
        1:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
        1:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
        1:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        1:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
        1:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        1:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        1:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        1:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
        1:  269:  return 0;
        -:  270:}
        -:  271:
        4:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        4:  280:  who = state->whoseTurn;
        -:  281:
        4:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        1:  285:    return -1;
        3:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
        3:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
        3:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        3:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
        3:  299:    state->coins = (state->coins) - (getCost(supplyPos));
        3:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        3:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:void myAssert(int x, char* msg){
        -:  312:
    #####:  313:  if (x == 0)
        -:  314:  {
    #####:  315:      printf("%s\n", msg );
        -:  316:  }
    #####:  317:} 
        -:  318:
    #####:  319:int numHandCards(struct gameState *state) {
    #####:  320:  return state->handCount[ whoseTurn(state) ];
        -:  321:}
        -:  322:
        1:  323:int handCard(int handPos, struct gameState *state) {
        1:  324:  int currentPlayer = whoseTurn(state);
        1:  325:  return state->hand[currentPlayer][handPos];
        -:  326:}
        -:  327:
        8:  328:int supplyCount(int card, struct gameState *state) {
        8:  329:  return state->supplyCount[card];
        -:  330:}
        -:  331:
    #####:  332:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  333:  int i;
    #####:  334:  int count = 0;
        -:  335:
    #####:  336:  for (i = 0; i < state->deckCount[player]; i++)
        -:  337:    {
    #####:  338:      if (state->deck[player][i] == card) count++;
        -:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->handCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->hand[player][i] == card) count++;
        -:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->discardCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->discard[player][i] == card) count++;
        -:  349:    }
        -:  350:
    #####:  351:  return count;
        -:  352:}
        -:  353:
        3:  354:int whoseTurn(struct gameState *state) {
        3:  355:  return state->whoseTurn;
        -:  356:}
        -:  357:
    #####:  358:int endTurn(struct gameState *state) {
        -:  359:  int k;
        -:  360:  int i;
    #####:  361:  int currentPlayer = whoseTurn(state);
        -:  362:  
        -:  363:  //Discard hand
    #####:  364:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  365:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  366:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  367:  }
    #####:  368:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  369:    
        -:  370:  //Code for determining the player
    #####:  371:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  372:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  373:  }
        -:  374:  else{
    #####:  375:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  376:  }
        -:  377:
    #####:  378:  state->outpostPlayed = 0;
    #####:  379:  state->phase = 0;
    #####:  380:  state->numActions = 1;
    #####:  381:  state->coins = 0;
    #####:  382:  state->numBuys = 1;
    #####:  383:  state->playedCardCount = 0;
    #####:  384:  state->handCount[state->whoseTurn] = 0;
        -:  385:
        -:  386:  //int k; move to top
        -:  387:  //Next player draws hand
    #####:  388:  for (k = 0; k < 5; k++){
    #####:  389:    drawCard(state->whoseTurn, state);//Draw a card
        -:  390:  }
        -:  391:
        -:  392:  //Update money
    #####:  393:  updateCoins(state->whoseTurn, state , 0);
        -:  394:
    #####:  395:  return 0;
        -:  396:}
        -:  397:
        2:  398:int isGameOver(struct gameState *state) {
        -:  399:  int i;
        -:  400:  int j;
        -:  401:	
        -:  402:  //if stack of Province cards is empty, the game ends
        2:  403:  if (state->supplyCount[province] == 0)
        -:  404:    {
        1:  405:      return 1;
        -:  406:    }
        -:  407:
        -:  408:  //if three supply pile are at 0, the game ends
        1:  409:  j = 0;
       26:  410:  for (i = 0; i < 25; i++)
        -:  411:    {
       25:  412:      if (state->supplyCount[i] == 0)
        -:  413:	{
    #####:  414:	  j++;
        -:  415:	}
        -:  416:    }
        1:  417:  if ( j >= 3)
        -:  418:    {
    #####:  419:      return 1;
        -:  420:    }
        -:  421:
        1:  422:  return 0;
        -:  423:}
        -:  424:
        2:  425:int scoreFor (int player, struct gameState *state) {
        -:  426:
        -:  427:  int i;
        2:  428:  int score = 0;
        -:  429:  //score from hand
        2:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  433:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  434:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  435:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  436:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  437:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  438:    }
        -:  439:
        -:  440:  //score from discard
        5:  441:  for (i = 0; i < state->discardCount[player]; i++)
        -:  442:    {
        3:  443:      if (state->discard[player][i] == curse) { score = score - 1; };
        3:  444:      if (state->discard[player][i] == estate) { score = score + 1; };
        3:  445:      if (state->discard[player][i] == duchy) { score = score + 3; };
        3:  446:      if (state->discard[player][i] == province) { score = score + 6; };
        3:  447:      if (state->discard[player][i] == great_hall) { score = score + 1; };
        3:  448:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  449:    }
        -:  450:
        -:  451:  //score from deck
        5:  452:  for (i = 0; i < state->discardCount[player]; i++)
        -:  453:    {
        3:  454:      if (state->deck[player][i] == curse) { score = score - 1; };
        3:  455:      if (state->deck[player][i] == estate) { score = score + 1; };
        3:  456:      if (state->deck[player][i] == duchy) { score = score + 3; };
        3:  457:      if (state->deck[player][i] == province) { score = score + 6; };
        3:  458:      if (state->deck[player][i] == great_hall) { score = score + 1; };
        3:  459:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  460:    }
        -:  461:
        2:  462:  return score;
        -:  463:}
        -:  464:
    #####:  465:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  466:  int i;	
        -:  467:  int j;
        -:  468:  int highScore;
        -:  469:  int currentPlayer;
        -:  470:
        -:  471:  //get score for each player
    #####:  472:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  473:    {
        -:  474:      //set unused player scores to -9999
    #####:  475:      if (i >= state->numPlayers)
        -:  476:	{
    #####:  477:	  players[i] = -9999;
        -:  478:	}
        -:  479:      else
        -:  480:	{
    #####:  481:	  players[i] = scoreFor (i, state);
        -:  482:	}
        -:  483:    }
        -:  484:
        -:  485:  //find highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  488:    {
    #####:  489:      if (players[i] > players[j])
        -:  490:	{
    #####:  491:	  j = i;
        -:  492:	}
        -:  493:    }
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //add 1 to players who had less turns
    #####:  497:  currentPlayer = whoseTurn(state);
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] == highScore && i > currentPlayer )
        -:  501:	{
    #####:  502:	  players[i]++;
        -:  503:	}
        -:  504:    }
        -:  505:
        -:  506:  //find new highest score
    #####:  507:  j = 0;
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:    {
    #####:  510:      if ( players[i] > players[j] )
        -:  511:	{
    #####:  512:	  j = i;
        -:  513:	}
        -:  514:    }
    #####:  515:  highScore = players[j];
        -:  516:
        -:  517:  //set winners in array to 1 and rest to 0
    #####:  518:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  519:    {
    #####:  520:      if ( players[i] == highScore )
        -:  521:	{
    #####:  522:	  players[i] = 1;
        -:  523:	}
        -:  524:      else
        -:  525:	{
    #####:  526:	  players[i] = 0;
        -:  527:	}
        -:  528:    }
        -:  529:
    #####:  530:  return 0;
        -:  531:}
        -:  532:
       31:  533:int drawCard(int player, struct gameState *state)
        -:  534:{	int count;
        -:  535:  int deckCounter;
       31:  536:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  537:    
        -:  538:    //Step 1 Shuffle the discard pile back into a deck
        -:  539:    int i;
        -:  540:    //Move discard to deck
    #####:  541:    for (i = 0; i < state->discardCount[player];i++){
    #####:  542:      state->deck[player][i] = state->discard[player][i];
    #####:  543:      state->discard[player][i] = -1;
        -:  544:    }
        -:  545:
    #####:  546:    state->deckCount[player] = state->discardCount[player];
    #####:  547:    state->discardCount[player] = 0;//Reset discard
        -:  548:
        -:  549:    //Shufffle the deck
    #####:  550:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  551:   
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  554:    }
        -:  555:    
    #####:  556:    state->discardCount[player] = 0;
        -:  557:
        -:  558:    //Step 2 Draw Card
    #####:  559:    count = state->handCount[player];//Get current player's hand count
        -:  560:    
        -:  561:    if (DEBUG){//Debug statements
        -:  562:      printf("Current hand count: %d\n", count);
        -:  563:    }
        -:  564:    
    #####:  565:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  566:
    #####:  567:    if (deckCounter == 0)
    #####:  568:      return -1;
        -:  569:
    #####:  570:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  571:    state->deckCount[player]--;
    #####:  572:    state->handCount[player]++;//Increment hand count
        -:  573:  }
        -:  574:
        -:  575:  else{
       31:  576:    int count = state->handCount[player];//Get current hand count for player
        -:  577:    int deckCounter;
        -:  578:    if (DEBUG){//Debug statements
        -:  579:      printf("Current hand count: %d\n", count);
        -:  580:    }
        -:  581:
       31:  582:    deckCounter = state->deckCount[player];//Create holder for the deck count
       31:  583:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       31:  584:    state->deckCount[player]--;
       31:  585:    state->handCount[player]++;//Increment hand count
        -:  586:  }
        -:  587:
       31:  588:  return 0;
        -:  589:}
        -:  590:
        9:  591:int getCost(int cardNumber)
        -:  592:{
        9:  593:  switch( cardNumber ) 
        -:  594:    {
        -:  595:    case curse:
        2:  596:      return 0;
        -:  597:    case estate:
        1:  598:      return 2;
        -:  599:    case duchy:
    #####:  600:      return 5;
        -:  601:    case province:
        4:  602:      return 8;
        -:  603:    case copper:
    #####:  604:      return 0;
        -:  605:    case silver:
        1:  606:      return 3;
        -:  607:    case gold:
    #####:  608:      return 6;
        -:  609:    case adventurer:
        1:  610:      return 6;
        -:  611:    case council_room:
    #####:  612:      return 5;
        -:  613:    case feast:
    #####:  614:      return 4;
        -:  615:    case gardens:
    #####:  616:      return 4;
        -:  617:    case mine:
    #####:  618:      return 5;
        -:  619:    case remodel:
    #####:  620:      return 4;
        -:  621:    case smithy:
    #####:  622:      return 4;
        -:  623:    case village:
    #####:  624:      return 3;
        -:  625:    case baron:
    #####:  626:      return 4;
        -:  627:    case great_hall:
    #####:  628:      return 3;
        -:  629:    case minion:
    #####:  630:      return 5;
        -:  631:    case steward:
    #####:  632:      return 3;
        -:  633:    case tribute:
    #####:  634:      return 5;
        -:  635:    case ambassador:
    #####:  636:      return 3;
        -:  637:    case cutpurse:
    #####:  638:      return 4;
        -:  639:    case embargo: 
    #####:  640:      return 2;
        -:  641:    case outpost:
    #####:  642:      return 5;
        -:  643:    case salvager:
    #####:  644:      return 4;
        -:  645:    case sea_hag:
    #####:  646:      return 4;
        -:  647:    case treasure_map:
    #####:  648:      return 4;
        -:  649:    }
        -:  650:	
    #####:  651:  return -1;
        -:  652:}
        -:  653:
    #####:  654:void adventurer_card(int drawntreasure, struct gameState *state, int currentPlayer, int cardDrawn, int *temphand ){
        -:  655:
    #####:  656:  int z = 0;
        -:  657:  //shoud be < 2 not 1
    #####:  658:  while(drawntreasure<1){
        -:  659:    
    #####:  660:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  661:      shuffle(currentPlayer, state);
        -:  662:    }
        -:  663:    
    #####:  664:    drawCard(currentPlayer, state);
    #####:  665:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  666:    
    #####:  667:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  668:      drawntreasure++;
        -:  669:    else{
    #####:  670:      temphand[z]=cardDrawn;
    #####:  671:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  672:      z++;
        -:  673:    }
        -:  674:  }
    #####:  675:    while(z-1>=0){
    #####:  676:      state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  677:      z=z-1;
        -:  678:    }
    #####:  679:        return ;
        -:  680:        
        -:  681:      
        -:  682:      
        -:  683:}
        -:  684:
    #####:  685:int council_room_card(int currentPlayer, struct gameState *state, int handPos ){
        -:  686:  int i;
        -:  687:  //+4 Cards
    #####:  688:        for (i = 0; i < 4; i++)
        -:  689:    {
    #####:  690:      drawCard(currentPlayer, state);
        -:  691:    }
        -:  692:        
        -:  693:        //+1 Buy
    #####:  694:        state->numBuys++;
        -:  695:        
        -:  696:        //Each other player draws a card
    #####:  697:        for (i = 0; i < state->numPlayers; i++)
        -:  698:    {
    #####:  699:      if ( i != currentPlayer )
        -:  700:        {
    #####:  701:          drawCard(i, state);
        -:  702:        }
        -:  703:    }
        -:  704:      
        -:  705:      //put played card in played card pile
    #####:  706:      discardCard(handPos, currentPlayer, state, 0);
        -:  707:      
    #####:  708:      return 0;
        -:  709:}
    #####:  710:int mine_card(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos ){
        -:  711:
        -:  712:  int i;
    #####:  713:  int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  714:
    #####:  715:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  716:  {
    #####:  717:    return -1;
        -:  718:  }
        -:  719:    
    #####:  720:      if (choice2 > treasure_map || choice2 < curse)
        -:  721:  {
    #####:  722:    return -1;
        -:  723:  }
        -:  724:
    #####:  725:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  726:  {
    #####:  727:    return -1;
        -:  728:  }
        -:  729:
    #####:  730:      gainCard(choice2, state, 2, currentPlayer);
        -:  731:
        -:  732:      //discard card from hand
    #####:  733:      discardCard(handPos, currentPlayer, state, 0);
        -:  734:
        -:  735:      //discard trashed card
    #####:  736:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  737:  {
    #####:  738:    if (state->hand[currentPlayer][i] == j)
        -:  739:      {
    #####:  740:        discardCard(i, currentPlayer, state, 0);      
    #####:  741:        break;
        -:  742:      }
        -:  743:  }
    #####:  744: return 0;     
        -:  745:}
        -:  746:
    #####:  747:int remodel_card(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos  ){
        -:  748:  int j, i;
        -:  749:
    #####:  750:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  751:
    #####:  752:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  753:  {
    #####:  754:    return -1;
        -:  755:  }
        -:  756:
    #####:  757:      gainCard(choice2, state, 0, currentPlayer);
        -:  758:
        -:  759:      //discard card from hand
    #####:  760:      discardCard(handPos, currentPlayer, state, 0);
        -:  761:
        -:  762:      //discard trashed card
    #####:  763:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  764:  {
    #####:  765:    if (state->hand[currentPlayer][i] == j)
        -:  766:      {
    #####:  767:        discardCard(i, currentPlayer, state, 0);      
    #####:  768:        break;
        -:  769:      }
        -:  770:  }
        -:  771:
        -:  772:
    #####:  773:      return 0;
        -:  774:}
        -:  775:
    #####:  776:int smithy_card(int currentPlayer, struct gameState *state, int handPos){
        -:  777:
        -:  778:  int i;
        -:  779:  //+3 Cards
        -:  780:    // it should be i++
    #####:  781:      for (i = 0; i < 3; i--)
        -:  782:  {
    #####:  783:    drawCard(currentPlayer, state);
        -:  784:  }
        -:  785:      
        -:  786:      //discard card from hand
    #####:  787:  discardCard(handPos, currentPlayer, state, 0);
    #####:  788:  return 0;
        -:  789:    
        -:  790:
        -:  791:}
        -:  792:
        2:  793:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  794:{
        -:  795:  int i;
        -:  796:  int j;
        -:  797:  int k;
        -:  798:  int x;
        -:  799:  int index;
        2:  800:  int currentPlayer = whoseTurn(state);
        2:  801:  int nextPlayer = currentPlayer + 1;
        -:  802:
        2:  803:  int tributeRevealedCards[2] = {-1, -1};
        -:  804:  int temphand[MAX_HAND];// moved above the if statement
        2:  805:  int drawntreasure=0;
        -:  806:  int cardDrawn;
        2:  807:  int z = 0;// this is the counter for the temp hand
        2:  808:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  809:    nextPlayer = 0;
        -:  810:  }
        -:  811:  
        -:  812:	
        -:  813:  //uses switch to select card and perform actions
        2:  814:  switch( card ) 
        -:  815:    {
        -:  816:    case adventurer:
    #####:  817:      adventurer_card(drawntreasure, state, currentPlayer, cardDrawn, temphand);
    #####:  818:      return 0;
        -:  819:
        -:  820:    case council_room:
    #####:  821:        council_room_card(currentPlayer, state, handPos);
        -:  822:
        -:  823:    case feast:
        -:  824:      //gain card with cost up to 5
        -:  825:      //Backup hand
    #####:  826:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  827:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  828:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  829:      }
        -:  830:      //Backup hand
        -:  831:
        -:  832:      //Update Coins for Buy
    #####:  833:      updateCoins(currentPlayer, state, 5);
    #####:  834:      x = 1;//Condition to loop on
    #####:  835:      while( x == 1) {//Buy one card
    #####:  836:	if (supplyCount(choice1, state) <= 0){
        -:  837:	  if (DEBUG)
        -:  838:	    printf("None of that card left, sorry!\n");
        -:  839:
        -:  840:	  if (DEBUG){
        -:  841:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  842:	  }
        -:  843:	}
    #####:  844:	else if (state->coins < getCost(choice1)){
    #####:  845:	  printf("That card is too expensive!\n");
        -:  846:
        -:  847:	  if (DEBUG){
        -:  848:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  849:	  }
        -:  850:	}
        -:  851:	else{
        -:  852:
        -:  853:	  if (DEBUG){
        -:  854:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  855:	  }
        -:  856:
    #####:  857:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  858:	  x = 0;//No more buying cards
        -:  859:
        -:  860:	  if (DEBUG){
        -:  861:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  862:	  }
        -:  863:
        -:  864:	}
        -:  865:      }     
        -:  866:
        -:  867:      //Reset Hand
    #####:  868:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  869:	state->hand[currentPlayer][i] = temphand[i];
    #####:  870:	temphand[i] = -1;
        -:  871:      }
        -:  872:      //Reset Hand
        -:  873:      			
    #####:  874:      return 0;
        -:  875:			
        -:  876:    case gardens:
    #####:  877:      return -1;
        -:  878:			
        -:  879:    case mine:
    #####:  880:      return mine_card(currentPlayer, state, choice1, choice2, handPos);
        -:  881:      
        -:  882:			
        -:  883:    case remodel:
    #####:  884:      return remodel_card(currentPlayer, state, choice1, choice2, handPos);
        -:  885:		
        -:  886:    case smithy:
    #####:  887:      return smithy_card(currentPlayer, state, handPos);
        -:  888:
        -:  889:    case village:
        -:  890:      //+1 Card
        1:  891:      drawCard(currentPlayer, state);
        -:  892:      
        -:  893:      //+2 Actions
        1:  894:      state->numActions = state->numActions + 2;
        -:  895:      
        -:  896:      //discard played card from hand
        1:  897:      discardCard(handPos, currentPlayer, state, 0);
        1:  898:      return 0;
        -:  899:		
        -:  900:    case baron:
    #####:  901:      state->numBuys++;//Increase buys by 1!
    #####:  902:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  903:	int p = 0;//Iterator for hand!
    #####:  904:	int card_not_discarded = 1;//Flag for discard set!
    #####:  905:	while(card_not_discarded){
    #####:  906:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  907:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  908:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  909:	    state->discardCount[currentPlayer]++;
    #####:  910:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  911:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  912:	    }
    #####:  913:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  914:	    state->handCount[currentPlayer]--;
    #####:  915:	    card_not_discarded = 0;//Exit the loop
        -:  916:	  }
    #####:  917:	  else if (p > state->handCount[currentPlayer]){
        -:  918:	    if(DEBUG) {
        -:  919:	      printf("No estate cards in your hand, invalid choice\n");
        -:  920:	      printf("Must gain an estate if there are any\n");
        -:  921:	    }
    #####:  922:	    if (supplyCount(estate, state) > 0){
    #####:  923:	      gainCard(estate, state, 0, currentPlayer);
    #####:  924:	      state->supplyCount[estate]--;//Decrement estates
    #####:  925:	      if (supplyCount(estate, state) == 0){
    #####:  926:		isGameOver(state);
        -:  927:	      }
        -:  928:	    }
    #####:  929:	    card_not_discarded = 0;//Exit the loop
        -:  930:	  }
        -:  931:			    
        -:  932:	  else{
    #####:  933:	    p++;//Next card
        -:  934:	  }
        -:  935:	}
        -:  936:      }
        -:  937:			    
        -:  938:      else{
    #####:  939:	if (supplyCount(estate, state) > 0){
    #####:  940:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  941:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  942:	  if (supplyCount(estate, state) == 0){
    #####:  943:	    isGameOver(state);
        -:  944:	  }
        -:  945:	}
        -:  946:      }
        -:  947:	    
        -:  948:      
    #####:  949:      return 0;
        -:  950:		
        -:  951:    case great_hall:
        -:  952:      //+1 Card
    #####:  953:      drawCard(currentPlayer, state);
        -:  954:			
        -:  955:      //+1 Actions
    #####:  956:      state->numActions++;
        -:  957:			
        -:  958:      //discard card from hand
    #####:  959:      discardCard(handPos, currentPlayer, state, 0);
    #####:  960:      return 0;
        -:  961:		
        -:  962:    case minion:
        -:  963:      //+1 action
    #####:  964:      state->numActions++;
        -:  965:			
        -:  966:      //discard card from hand
    #####:  967:      discardCard(handPos, currentPlayer, state, 0);
        -:  968:			
    #####:  969:      if (choice1)		//+2 coins
        -:  970:	{
    #####:  971:	  state->coins = state->coins + 2;
        -:  972:	}
        -:  973:			
    #####:  974:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  975:	{
        -:  976:	  //discard hand
    #####:  977:	  while(numHandCards(state) > 0)
        -:  978:	    {
    #####:  979:	      discardCard(handPos, currentPlayer, state, 0);
        -:  980:	    }
        -:  981:				
        -:  982:	  //draw 4
    #####:  983:	  for (i = 0; i < 4; i++)
        -:  984:	    {
    #####:  985:	      drawCard(currentPlayer, state);
        -:  986:	    }
        -:  987:				
        -:  988:	  //other players discard hand and redraw if hand size > 4
    #####:  989:	  for (i = 0; i < state->numPlayers; i++)
        -:  990:	    {
    #####:  991:	      if (i != currentPlayer)
        -:  992:		{
    #####:  993:		  if ( state->handCount[i] > 4 )
        -:  994:		    {
        -:  995:		      //discard hand
    #####:  996:		      while( state->handCount[i] > 0 )
        -:  997:			{
    #####:  998:			  discardCard(handPos, i, state, 0);
        -:  999:			}
        -: 1000:							
        -: 1001:		      //draw 4
    #####: 1002:		      for (j = 0; j < 4; j++)
        -: 1003:			{
    #####: 1004:			  drawCard(i, state);
        -: 1005:			}
        -: 1006:		    }
        -: 1007:		}
        -: 1008:	    }
        -: 1009:				
        -: 1010:	}
    #####: 1011:      return 0;
        -: 1012:		
        -: 1013:    case steward:
    #####: 1014:      if (choice1 == 1)
        -: 1015:	{
        -: 1016:	  //+2 cards
    #####: 1017:	  drawCard(currentPlayer, state);
    #####: 1018:	  drawCard(currentPlayer, state);
        -: 1019:	}
    #####: 1020:      else if (choice1 == 2)
        -: 1021:	{
        -: 1022:	  //+2 coins
    #####: 1023:	  state->coins = state->coins + 2;
        -: 1024:	}
        -: 1025:      else
        -: 1026:	{
        -: 1027:	  //trash 2 cards in hand
    #####: 1028:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1029:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1030:	}
        -: 1031:			
        -: 1032:      //discard card from hand
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1034:      return 0;
        -: 1035:		
        -: 1036:    case tribute:
    #####: 1037:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1038:	if (state->deckCount[nextPlayer] > 0){
    #####: 1039:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1040:	  state->deckCount[nextPlayer]--;
        -: 1041:	}
    #####: 1042:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1043:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1044:	  state->discardCount[nextPlayer]--;
        -: 1045:	}
        -: 1046:	else{
        -: 1047:	  //No Card to Reveal
        -: 1048:	  if (DEBUG){
        -: 1049:	    printf("No cards to reveal\n");
        -: 1050:	  }
        -: 1051:	}
        -: 1052:      }
        -: 1053:	    
        -: 1054:      else{
    #####: 1055:	if (state->deckCount[nextPlayer] == 0){
    #####: 1056:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1057:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1058:	    state->deckCount[nextPlayer]++;
    #####: 1059:	    state->discard[nextPlayer][i] = -1;
    #####: 1060:	    state->discardCount[nextPlayer]--;
        -: 1061:	  }
        -: 1062:			    
    #####: 1063:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1064:	} 
    #####: 1065:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
    #####: 1068:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1069:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1070:	state->deckCount[nextPlayer]--;
        -: 1071:      }    
        -: 1072:		       
    #####: 1073:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1074:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1075:	state->playedCardCount++;
    #####: 1076:	tributeRevealedCards[1] = -1;
        -: 1077:      }
        -: 1078:
    #####: 1079:      for (i = 0; i <= 2; i ++){
    #####: 1080:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1081:	  state->coins += 2;
        -: 1082:	}
        -: 1083:		    
    #####: 1084:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1085:	  drawCard(currentPlayer, state);
    #####: 1086:	  drawCard(currentPlayer, state);
        -: 1087:	}
        -: 1088:	else{//Action Card
    #####: 1089:	  state->numActions = state->numActions + 2;
        -: 1090:	}
        -: 1091:      }
        -: 1092:	    
    #####: 1093:      return 0;
        -: 1094:		
        -: 1095:    case ambassador:
    #####: 1096:      j = 0;		//used to check if player has enough cards to discard
        -: 1097:
    #####: 1098:      if (choice2 > 2 || choice2 < 0)
        -: 1099:	{
    #####: 1100:	  return -1;				
        -: 1101:	}
        -: 1102:
    #####: 1103:      if (choice1 == handPos)
        -: 1104:	{
    #####: 1105:	  return -1;
        -: 1106:	}
        -: 1107:
    #####: 1108:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1109:	{
    #####: 1110:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1111:	    {
    #####: 1112:	      j++;
        -: 1113:	    }
        -: 1114:	}
    #####: 1115:      if (j < choice2)
        -: 1116:	{
    #####: 1117:	  return -1;				
        -: 1118:	}
        -: 1119:
        -: 1120:      if (DEBUG) 
        -: 1121:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1122:
        -: 1123:      //increase supply count for choosen card by amount being discarded
    #####: 1124:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1125:			
        -: 1126:      //each other player gains a copy of revealed card
    #####: 1127:      for (i = 0; i < state->numPlayers; i++)
        -: 1128:	{
    #####: 1129:	  if (i != currentPlayer)
        -: 1130:	    {
    #####: 1131:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1132:	    }
        -: 1133:	}
        -: 1134:
        -: 1135:      //discard played card from hand
    #####: 1136:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1137:
        -: 1138:      //trash copies of cards returned to supply
    #####: 1139:      for (j = 0; j < choice2; j++)
        -: 1140:	{
    #####: 1141:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1142:	    {
    #####: 1143:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1144:		{
    #####: 1145:		  discardCard(i, currentPlayer, state, 1);
    #####: 1146:		  break;
        -: 1147:		}
        -: 1148:	    }
        -: 1149:	}			
        -: 1150:
    #####: 1151:      return 0;
        -: 1152:		
        -: 1153:    case cutpurse:
        -: 1154:
    #####: 1155:      updateCoins(currentPlayer, state, 2);
    #####: 1156:      for (i = 0; i < state->numPlayers; i++)
        -: 1157:	{
    #####: 1158:	  if (i != currentPlayer)
        -: 1159:	    {
    #####: 1160:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1161:		{
    #####: 1162:		  if (state->hand[i][j] == copper)
        -: 1163:		    {
    #####: 1164:		      discardCard(j, i, state, 0);
    #####: 1165:		      break;
        -: 1166:		    }
    #####: 1167:		  if (j == state->handCount[i])
        -: 1168:		    {
    #####: 1169:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1170:			{
        -: 1171:			  if (DEBUG)
        -: 1172:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1173:			}	
    #####: 1174:		      break;
        -: 1175:		    }		
        -: 1176:		}
        -: 1177:					
        -: 1178:	    }
        -: 1179:				
        -: 1180:	}				
        -: 1181:
        -: 1182:      //discard played card from hand
    #####: 1183:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1184:
    #####: 1185:      return 0;
        -: 1186:
        -: 1187:		
        -: 1188:    case embargo: 
        -: 1189:      //+2 Coins
    #####: 1190:      state->coins = state->coins + 2;
        -: 1191:			
        -: 1192:      //see if selected pile is in play
    #####: 1193:      if ( state->supplyCount[choice1] == -1 )
        -: 1194:	{
    #####: 1195:	  return -1;
        -: 1196:	}
        -: 1197:			
        -: 1198:      //add embargo token to selected supply pile
    #####: 1199:      state->embargoTokens[choice1]++;
        -: 1200:			
        -: 1201:      //trash card
    #####: 1202:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1203:      return 0;
        -: 1204:		
        -: 1205:    case outpost:
        -: 1206:      //set outpost flag
    #####: 1207:      state->outpostPlayed++;
        -: 1208:			
        -: 1209:      //discard card
    #####: 1210:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1211:      return 0;
        -: 1212:		
        -: 1213:    case salvager:
        -: 1214:      //+1 buy
    #####: 1215:      state->numBuys++;
        -: 1216:			
    #####: 1217:      if (choice1)
        -: 1218:	{
        -: 1219:	  //gain coins equal to trashed card
    #####: 1220:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1221:	  //trash card
    #####: 1222:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1223:	}
        -: 1224:			
        -: 1225:      //discard card
    #####: 1226:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1227:      return 0;
        -: 1228:		
        -: 1229:    case sea_hag:
    #####: 1230:      for (i = 0; i < state->numPlayers; i++){
    #####: 1231:	if (i != currentPlayer){
    #####: 1232:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1233:	  state->discardCount[i]++;
    #####: 1234:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1235:	}
        -: 1236:      }
    #####: 1237:      return 0;
        -: 1238:		
        -: 1239:    case treasure_map:
        -: 1240:      //search hand for another treasure_map
    #####: 1241:      index = -1;
    #####: 1242:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1243:	{
    #####: 1244:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1245:	    {
    #####: 1246:	      index = i;
    #####: 1247:	      break;
        -: 1248:	    }
        -: 1249:	}
    #####: 1250:      if (index > -1)
        -: 1251:	{
        -: 1252:	  //trash both treasure cards
    #####: 1253:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1254:	  discardCard(index, currentPlayer, state, 1);
        -: 1255:
        -: 1256:	  //gain 4 Gold cards
    #####: 1257:	  for (i = 0; i < 4; i++)
        -: 1258:	    {
    #####: 1259:	      gainCard(gold, state, 1, currentPlayer);
        -: 1260:	    }
        -: 1261:				
        -: 1262:	  //return success
    #####: 1263:	  return 1;
        -: 1264:	}
        -: 1265:			
        -: 1266:      //no second treasure_map found in hand
    #####: 1267:      return -1;
        -: 1268:    }
        -: 1269:	
        1: 1270:  return -1;
        -: 1271:}
        -: 1272:
        1: 1273:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1274:{
        -: 1275:	
        -: 1276:  //if card is not trashed, added to Played pile 
        1: 1277:  if (trashFlag < 1)
        -: 1278:    {
        -: 1279:      //add card to played pile
        1: 1280:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1281:      state->playedCardCount++;
        -: 1282:    }
        -: 1283:	
        -: 1284:  //set played card to -1
        1: 1285:  state->hand[currentPlayer][handPos] = -1;
        -: 1286:	
        -: 1287:  //remove card from player's hand
        1: 1288:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1289:    {
        -: 1290:      //reduce number of cards in hand
    #####: 1291:      state->handCount[currentPlayer]--;
        -: 1292:    }
        1: 1293:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1294:    {
        -: 1295:      //reduce number of cards in hand
    #####: 1296:      state->handCount[currentPlayer]--;
        -: 1297:    }
        -: 1298:  else 	
        -: 1299:    {
        -: 1300:      //replace discarded card with last card in hand
        1: 1301:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1302:      //set last card to -1
        1: 1303:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1304:      //reduce number of cards in hand
        1: 1305:      state->handCount[currentPlayer]--;
        -: 1306:    }
        -: 1307:	
        1: 1308:  return 0;
        -: 1309:}
        -: 1310:
        3: 1311:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1312:{
        -: 1313:  //Note: supplyPos is enum of choosen card
        -: 1314:	
        -: 1315:  //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1316:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1317:    {
    #####: 1318:      return -1;
        -: 1319:    }
        -: 1320:	
        -: 1321:  //added card for [whoseTurn] current player:
        -: 1322:  // toFlag = 0 : add to discard
        -: 1323:  // toFlag = 1 : add to deck
        -: 1324:  // toFlag = 2 : add to hand
        -: 1325:
        3: 1326:  if (toFlag == 1)
        -: 1327:    {
    #####: 1328:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1329:      state->deckCount[player]++;
        -: 1330:    }
        3: 1331:  else if (toFlag == 2)
        -: 1332:    {
    #####: 1333:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1334:      state->handCount[player]++;
        -: 1335:    }
        -: 1336:  else
        -: 1337:    {
        3: 1338:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1339:      state->discardCount[player]++;
        -: 1340:    }
        -: 1341:	
        -: 1342:  //decrease number in supply pile
        3: 1343:  state->supplyCount[supplyPos]--;
        -: 1344:	 
        3: 1345:  return 0;
        -: 1346:}
        -: 1347:
        7: 1348:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1349:{
        -: 1350:  int i;
        -: 1351:	
        -: 1352:  //reset coin count
        7: 1353:  state->coins = 0;
        -: 1354:
        -: 1355:  //add coins for each Treasure card in player's hand
       42: 1356:  for (i = 0; i < state->handCount[player]; i++)
        -: 1357:    {
       35: 1358:      if (state->hand[player][i] == copper)
        -: 1359:	{
       28: 1360:	  state->coins += 1;
        -: 1361:	}
        7: 1362:      else if (state->hand[player][i] == silver)
        -: 1363:	{
    #####: 1364:	  state->coins += 2;
        -: 1365:	}
        7: 1366:      else if (state->hand[player][i] == gold)
        -: 1367:	{
    #####: 1368:	  state->coins += 3;
        -: 1369:	}	
        -: 1370:    }	
        -: 1371:
        -: 1372:  //add bonus
        7: 1373:  state->coins += bonus;
        -: 1374:
        7: 1375:  return 0;
        -: 1376:}
        -: 1377:
        -: 1378:
        -: 1379://end of dominion.c
        -: 1380:
