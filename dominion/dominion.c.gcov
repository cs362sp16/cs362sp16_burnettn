        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      180:    8:int compare(const void* a, const void* b) {
      180:    9:    if (*(int*)a > *(int*)b)
    #####:   10:        return 1;
      180:   11:    if (*(int*)a < *(int*)b)
       48:   12:        return -1;
      132:   13:    return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:    return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:        int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        8:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:        struct gameState *state) {
        -:   39:
        -:   40:    int i;
        -:   41:    int j;
        -:   42:    int it;			
        -:   43:    //set up random number generator
        8:   44:    SelectStream(1);
        8:   45:    PutSeed((long)randomSeed);
        -:   46:
        -:   47:    //check number of players
        8:   48:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
        1:   50:        return -1;
        -:   51:    }
        -:   52:
        -:   53:    //set number of players
        7:   54:    state->numPlayers = numPlayers;
        -:   55:
        -:   56:    //check selected kingdom cards are different
       68:   57:    for (i = 0; i < 10; i++)
        -:   58:    {
      681:   59:        for (j = 0; j < 10; j++)
        -:   60:        {
      620:   61:            if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:            {
        1:   63:                return -1;
        -:   64:            }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:    //initialize supply
        -:   70:    ///////////////////////////////
        -:   71:
        -:   72:    //set number of Curse cards
        6:   73:    if (numPlayers == 2)
        -:   74:    {
        6:   75:        state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:    else if (numPlayers == 3)
        -:   78:    {
    #####:   79:        state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:    else
        -:   82:    {
    #####:   83:        state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:    //set number of Victory cards
        6:   87:    if (numPlayers == 2)
        -:   88:    {
        6:   89:        state->supplyCount[estate] = 8;
        6:   90:        state->supplyCount[duchy] = 8;
        6:   91:        state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:    else
        -:   94:    {
    #####:   95:        state->supplyCount[estate] = 12;
    #####:   96:        state->supplyCount[duchy] = 12;
    #####:   97:        state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:    //set number of Treasure cards
        6:  101:    state->supplyCount[copper] = 60 - (7 * numPlayers);
        6:  102:    state->supplyCount[silver] = 40;
        6:  103:    state->supplyCount[gold] = 30;
        -:  104:
        -:  105:    //set number of Kingdom cards
      126:  106:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      990:  108:        for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:        {
      930:  110:            if (kingdomCards[j] == i)
        -:  111:            {
        -:  112:                //check if card is a 'Victory' Kingdom card
       60:  113:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:                {
       12:  115:                    if (numPlayers == 2){ 
        6:  116:                        state->supplyCount[i] = 8; 
        -:  117:                    }
    #####:  118:                    else{ state->supplyCount[i] = 12; }
        -:  119:                }
        -:  120:                else
        -:  121:                {
       54:  122:                    state->supplyCount[i] = 10;
        -:  123:                }
       60:  124:                break;
        -:  125:            }
        -:  126:            else    //card is not in the set choosen for the game
        -:  127:            {
      870:  128:                state->supplyCount[i] = -1;
        -:  129:            }
        -:  130:        }
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:    ////////////////////////
        -:  135:    //supply intilization complete
        -:  136:
        -:  137:    //set player decks
       18:  138:    for (i = 0; i < numPlayers; i++)
        -:  139:    {
       12:  140:        state->deckCount[i] = 0;
       48:  141:        for (j = 0; j < 3; j++)
        -:  142:        {
       36:  143:            state->deck[i][j] = estate;
       36:  144:            state->deckCount[i]++;
        -:  145:        }
       96:  146:        for (j = 3; j < 10; j++)
        -:  147:        {
       84:  148:            state->deck[i][j] = copper;
       84:  149:            state->deckCount[i]++;		
        -:  150:        }
        -:  151:    }
        -:  152:
        -:  153:    //shuffle player decks
       18:  154:    for (i = 0; i < numPlayers; i++)
        -:  155:    {
       12:  156:        if ( shuffle(i, state) < 0 )
        -:  157:        {
    #####:  158:            return -1;
        -:  159:        }
        -:  160:    }
        -:  161:
        -:  162:    //draw player hands
       18:  163:    for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:        //initialize hand size to zero
       12:  166:        state->handCount[i] = 0;
       12:  167:        state->discardCount[i] = 0;
        -:  168:        //draw 5 cards
        -:  169:        // for (j = 0; j < 5; j++)
        -:  170:        //	{
        -:  171:        //	  drawCard(i, state);
        -:  172:        //	}
        -:  173:    }
        -:  174:
        -:  175:    //set embargo tokens to 0 for all supply piles
      168:  176:    for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      162:  178:        state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:    //initialize first player's turn
        6:  182:    state->outpostPlayed = 0;
        6:  183:    state->phase = 0;
        6:  184:    state->numActions = 1;
        6:  185:    state->numBuys = 1;
        6:  186:    state->playedCardCount = 0;
        6:  187:    state->whoseTurn = 0;
        6:  188:    state->handCount[state->whoseTurn] = 0;
        -:  189:    //int it; move to top
        -:  190:
        -:  191:    //Moved draw cards to here, only drawing at the start of a turn
       36:  192:    for (it = 0; it < 5; it++){
       30:  193:        drawCard(state->whoseTurn, state);
        -:  194:    }
        -:  195:
        6:  196:    updateCoins(state->whoseTurn, state, 0);
        -:  197:
        6:  198:    return 0;
        -:  199:}
        -:  200:
       12:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:    int newDeck[MAX_DECK];
       12:  204:    int newDeckPos = 0;
        -:  205:    int card;
        -:  206:    int i;
        -:  207:
       12:  208:    if (state->deckCount[player] < 1)
    #####:  209:        return -1;
       12:  210:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  211:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  212:
      144:  213:    while (state->deckCount[player] > 0) {
      120:  214:        card = floor(Random() * state->deckCount[player]);
      120:  215:        newDeck[newDeckPos] = state->deck[player][card];
      120:  216:        newDeckPos++;
      372:  217:        for (i = card; i < state->deckCount[player]-1; i++) {
      252:  218:            state->deck[player][i] = state->deck[player][i+1];
        -:  219:        }
      120:  220:        state->deckCount[player]--;
        -:  221:    }
      132:  222:    for (i = 0; i < newDeckPos; i++) {
      120:  223:        state->deck[player][i] = newDeck[i];
      120:  224:        state->deckCount[player]++;
        -:  225:    }
        -:  226:
       12:  227:    return 0;
        -:  228:}
        -:  229:
        1:  230:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  231:{	
        -:  232:    if (DEBUG){
        -:  233:        printf("Entering playCard...\n");
        -:  234:    }
        -:  235:    
        -:  236:    int card;
        1:  237:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  238:
        -:  239:    //check if it is the right phase
        1:  240:    if (state->phase != 0)
        -:  241:    {
    #####:  242:        return -1;
        -:  243:    }
        -:  244:
        -:  245:    //check if player has enough actions
        1:  246:    if ( state->numActions < 1 )
        -:  247:    {
    #####:  248:        return -1;
        -:  249:    }
        -:  250:
        -:  251:    //get card played
        1:  252:    card = handCard(handPos, state);
        -:  253:
        -:  254:    //check if selected card is an action
        1:  255:    if ( card < adventurer || card > treasure_map )
        -:  256:    {
    #####:  257:        return -1;
        -:  258:    }
        -:  259:
        -:  260:    //play card
        1:  261:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  262:    {
    #####:  263:        return -1;
        -:  264:    }
        -:  265:
        -:  266:    //reduce number of actions
        1:  267:    state->numActions--;
        -:  268:
        -:  269:    //update coins (Treasure cards may be added with card draws)
        1:  270:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  271:
        1:  272:    return 0;
        -:  273:}
        -:  274:
        4:  275:int buyCard(int supplyPos, struct gameState *state) {
        -:  276:    int who;
        -:  277:    if (DEBUG){
        -:  278:        printf("Entering buyCard...\n");
        -:  279:    }
        -:  280:
        -:  281:    // I don't know what to do about the phase thing.
        -:  282:
        4:  283:    who = state->whoseTurn;
        -:  284:
        4:  285:    if (state->numBuys < 1){
        -:  286:        if (DEBUG)
        -:  287:            printf("You do not have any buys left\n");
        1:  288:        return -1;
        3:  289:    } else if (supplyCount(supplyPos, state) <1){
        -:  290:        if (DEBUG)
        -:  291:            printf("There are not any of that type of card left\n");
    #####:  292:        return -1;
        3:  293:    } else if (state->coins < getCost(supplyPos)){
        -:  294:        if (DEBUG) 
        -:  295:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  296:        return -1;
        -:  297:    } else {
        3:  298:        state->phase=1;
        -:  299:        //state->supplyCount[supplyPos]--;
        3:  300:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  301:
        3:  302:        state->coins = (state->coins) - (getCost(supplyPos));
        3:  303:        state->numBuys--;
        -:  304:        if (DEBUG)
        -:  305:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  306:    }
        -:  307:
        -:  308:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  309:    //state->discardCount[who]++;
        -:  310:
        3:  311:    return 0;
        -:  312:}
        -:  313:
    #####:  314:int numHandCards(struct gameState *state) {
    #####:  315:    return state->handCount[ whoseTurn(state) ];
        -:  316:}
        -:  317:
        1:  318:int handCard(int handPos, struct gameState *state) {
        1:  319:    int currentPlayer = whoseTurn(state);
        1:  320:    return state->hand[currentPlayer][handPos];
        -:  321:}
        -:  322:
        8:  323:int supplyCount(int card, struct gameState *state) {
        8:  324:    return state->supplyCount[card];
        -:  325:}
        -:  326:
    #####:  327:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  328:    int i;
    #####:  329:    int count = 0;
        -:  330:
    #####:  331:    for (i = 0; i < state->deckCount[player]; i++)
        -:  332:    {
    #####:  333:        if (state->deck[player][i] == card) count++;
        -:  334:    }
        -:  335:
    #####:  336:    for (i = 0; i < state->handCount[player]; i++)
        -:  337:    {
    #####:  338:        if (state->hand[player][i] == card) count++;
        -:  339:    }
        -:  340:
    #####:  341:    for (i = 0; i < state->discardCount[player]; i++)
        -:  342:    {
    #####:  343:        if (state->discard[player][i] == card) count++;
        -:  344:    }
        -:  345:
    #####:  346:    return count;
        -:  347:}
        -:  348:
        3:  349:int whoseTurn(struct gameState *state) {
        3:  350:    return state->whoseTurn;
        -:  351:}
        -:  352:
    #####:  353:int endTurn(struct gameState *state) {
        -:  354:    int k;
        -:  355:    int i;
    #####:  356:    int currentPlayer = whoseTurn(state);
        -:  357:
        -:  358:    //Discard hand
    #####:  359:    for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  360:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  361:        state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  362:    }
    #####:  363:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  364:
        -:  365:    //Code for determining the player
    #####:  366:    if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  367:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  368:    }
        -:  369:    else{
    #####:  370:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  371:    }
        -:  372:
    #####:  373:    state->outpostPlayed = 0;
    #####:  374:    state->phase = 0;
    #####:  375:    state->numActions = 1;
    #####:  376:    state->coins = 0;
    #####:  377:    state->numBuys = 1;
    #####:  378:    state->playedCardCount = 0;
    #####:  379:    state->handCount[state->whoseTurn] = 0;
        -:  380:
        -:  381:    //int k; move to top
        -:  382:    //Next player draws hand
    #####:  383:    for (k = 0; k < 5; k++){
    #####:  384:        drawCard(state->whoseTurn, state);//Draw a card
        -:  385:    }
        -:  386:
        -:  387:    //Update money
    #####:  388:    updateCoins(state->whoseTurn, state , 0);
        -:  389:
    #####:  390:    return 0;
        -:  391:}
        -:  392:
        2:  393:int isGameOver(struct gameState *state) {
        -:  394:    int i;
        -:  395:    int j;
        -:  396:
        -:  397:    //if stack of Province cards is empty, the game ends
        2:  398:    if (state->supplyCount[province] == 0)
        -:  399:    {
        1:  400:        return 1;
        -:  401:    }
        -:  402:
        -:  403:    //if three supply pile are at 0, the game ends
        1:  404:    j = 0;
       26:  405:    for (i = 0; i < 25; i++)
        -:  406:    {
       25:  407:        if (state->supplyCount[i] == 0)
        -:  408:        {
    #####:  409:            j++;
        -:  410:        }
        -:  411:    }
        1:  412:    if ( j >= 3)
        -:  413:    {
    #####:  414:        return 1;
        -:  415:    }
        -:  416:
        1:  417:    return 0;
        -:  418:}
        -:  419:
        2:  420:int scoreFor (int player, struct gameState *state) {
        -:  421:
        -:  422:    int i;
        2:  423:    int score = 0;
        -:  424:    //score from hand
        2:  425:    for (i = 0; i < state->handCount[player]; i++)
        -:  426:    {
    #####:  427:        if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  428:        if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  429:        if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  430:        if (state->hand[player][i] == province) { score = score + 6; };
    #####:  431:        if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  432:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  433:    }
        -:  434:
        -:  435:    //score from discard
        5:  436:    for (i = 0; i < state->discardCount[player]; i++)
        -:  437:    {
        3:  438:        if (state->discard[player][i] == curse) { score = score - 1; };
        3:  439:        if (state->discard[player][i] == estate) { score = score + 1; };
        3:  440:        if (state->discard[player][i] == duchy) { score = score + 3; };
        3:  441:        if (state->discard[player][i] == province) { score = score + 6; };
        3:  442:        if (state->discard[player][i] == great_hall) { score = score + 1; };
        3:  443:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  444:    }
        -:  445:
        -:  446:    //score from deck
       22:  447:    for (i = 0; i < state->deckCount[player]; i++)
        -:  448:    {
       20:  449:        if (state->deck[player][i] == curse) { score = score - 1; };
       20:  450:        if (state->deck[player][i] == estate) { score = score + 1; };
       20:  451:        if (state->deck[player][i] == duchy) { score = score + 3; };
       20:  452:        if (state->deck[player][i] == province) { score = score + 6; };
       20:  453:        if (state->deck[player][i] == great_hall) { score = score + 1; };
       20:  454:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  455:    }
        -:  456:
        2:  457:    return score;
        -:  458:}
        -:  459:
    #####:  460:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  461:    int i;	
        -:  462:    int j;
        -:  463:    int highScore;
        -:  464:    int currentPlayer;
        -:  465:
        -:  466:    //get score for each player
    #####:  467:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  468:    {
        -:  469:        //set unused player scores to -9999
    #####:  470:        if (i >= state->numPlayers)
        -:  471:        {
    #####:  472:            players[i] = -9999;
        -:  473:        }
        -:  474:        else
        -:  475:        {
    #####:  476:            players[i] = scoreFor (i, state);
        -:  477:        }
        -:  478:    }
        -:  479:
        -:  480:    //find highest score
    #####:  481:    j = 0;
    #####:  482:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  483:    {
    #####:  484:        if (players[i] > players[j])
        -:  485:        {
    #####:  486:            j = i;
        -:  487:        }
        -:  488:    }
    #####:  489:    highScore = players[j];
        -:  490:
        -:  491:    //add 1 to players who had less turns
    #####:  492:    currentPlayer = whoseTurn(state);
    #####:  493:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  494:    {
    #####:  495:        if ( players[i] == highScore && i > currentPlayer )
        -:  496:        {
    #####:  497:            players[i]++;
        -:  498:        }
        -:  499:    }
        -:  500:
        -:  501:    //find new highest score
    #####:  502:    j = 0;
    #####:  503:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  504:    {
    #####:  505:        if ( players[i] > players[j] )
        -:  506:        {
    #####:  507:            j = i;
        -:  508:        }
        -:  509:    }
    #####:  510:    highScore = players[j];
        -:  511:
        -:  512:    //set winners in array to 1 and rest to 0
    #####:  513:    for (i = 0; i < MAX_PLAYERS; i++)
        -:  514:    {
    #####:  515:        if ( players[i] == highScore )
        -:  516:        {
    #####:  517:            players[i] = 1;
        -:  518:        }
        -:  519:        else
        -:  520:        {
    #####:  521:            players[i] = 0;
        -:  522:        }
        -:  523:    }
        -:  524:
    #####:  525:    return 0;
        -:  526:}
        -:  527:
       31:  528:int drawCard(int player, struct gameState *state)
        -:  529:{	int count;
        -:  530:    int deckCounter;
       31:  531:    if (state->deckCount[player] <= 0){//Deck is empty
        -:  532:
        -:  533:        //Step 1 Shuffle the discard pile back into a deck
        -:  534:        int i;
        -:  535:        //Move discard to deck
    #####:  536:        for (i = 0; i < state->discardCount[player];i++){
    #####:  537:            state->deck[player][i] = state->discard[player][i];
    #####:  538:            state->discard[player][i] = -1;
        -:  539:        }
        -:  540:
    #####:  541:        state->deckCount[player] = state->discardCount[player];
    #####:  542:        state->discardCount[player] = 0;//Reset discard
        -:  543:
        -:  544:        //Shufffle the deck
    #####:  545:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  546:
        -:  547:        if (DEBUG){//Debug statements
        -:  548:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  549:        }
        -:  550:
    #####:  551:        state->discardCount[player] = 0;
        -:  552:
        -:  553:        //Step 2 Draw Card
    #####:  554:        count = state->handCount[player];//Get current player's hand count
        -:  555:
        -:  556:        if (DEBUG){//Debug statements
        -:  557:          //  printf("Current hand count: %d\n", count);
        -:  558:        }
        -:  559:
    #####:  560:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  561:
    #####:  562:        if (deckCounter == 0)
    #####:  563:            return -1;
        -:  564:
    #####:  565:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  566:        state->deckCount[player]--;
    #####:  567:        state->handCount[player]++;//Increment hand count
        -:  568:    }
        -:  569:
        -:  570:    else{
       31:  571:        int count = state->handCount[player];//Get current hand count for player
        -:  572:        int deckCounter;
        -:  573:        if (DEBUG){//Debug statements
        -:  574:        //    printf("Current hand count: %d\n", count);
        -:  575:        }
        -:  576:
       31:  577:        deckCounter = state->deckCount[player];//Create holder for the deck count
       31:  578:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       31:  579:        state->deckCount[player]--;
       31:  580:        state->handCount[player]++;//Increment hand count
        -:  581:    }
        -:  582:
       31:  583:    return 0;
        -:  584:}
        -:  585:
        9:  586:int getCost(int cardNumber)
        -:  587:{
        9:  588:    switch( cardNumber ) 
        -:  589:    {
        -:  590:        case curse:
        2:  591:            return 0;
        -:  592:        case estate:
        1:  593:            return 2;
        -:  594:        case duchy:
    #####:  595:            return 5;
        -:  596:        case province:
        4:  597:            return 8;
        -:  598:        case copper:
    #####:  599:            return 0;
        -:  600:        case silver:
        1:  601:            return 3;
        -:  602:        case gold:
    #####:  603:            return 6;
        -:  604:        case adventurer:
        1:  605:            return 6;
        -:  606:        case council_room:
    #####:  607:            return 5;
        -:  608:        case feast:
    #####:  609:            return 4;
        -:  610:        case gardens:
    #####:  611:            return 4;
        -:  612:        case mine:
    #####:  613:            return 5;
        -:  614:        case remodel:
    #####:  615:            return 4;
        -:  616:        case smithy:
    #####:  617:            return 4;
        -:  618:        case village:
    #####:  619:            return 3;
        -:  620:        case baron:
    #####:  621:            return 4;
        -:  622:        case great_hall:
    #####:  623:            return 3;
        -:  624:        case minion:
    #####:  625:            return 5;
        -:  626:        case steward:
    #####:  627:            return 3;
        -:  628:        case tribute:
    #####:  629:            return 5;
        -:  630:        case ambassador:
    #####:  631:            return 3;
        -:  632:        case cutpurse:
    #####:  633:            return 4;
        -:  634:        case embargo: 
    #####:  635:            return 2;
        -:  636:        case outpost:
    #####:  637:            return 5;
        -:  638:        case salvager:
    #####:  639:            return 4;
        -:  640:        case sea_hag:
    #####:  641:            return 4;
        -:  642:        case treasure_map:
    #####:  643:            return 4;
        -:  644:    }
        -:  645:
    #####:  646:    return -1;
        -:  647:}
        -:  648:
    #####:  649:void cardEffect_adventurer(struct gameState* state, int* drawntreasure, int currentPlayer, int cardDrawn, int* temphand, int* z){
    #####:  650:    while((*drawntreasure)<2){
    #####:  651:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  652:            shuffle(currentPlayer, state); }
    #####:  653:        drawCard(currentPlayer, state);
    #####:  654:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  655:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  656:            (*drawntreasure)++;
        -:  657:        else{
    #####:  658:            temphand[(*z)]=cardDrawn;
    #####:  659:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  660:            (*z)++;}}
    #####:  661:    while((*z)-1>=0){
    #####:  662:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[(*z)-1]; // discard all cards in play that have been drawn
    #####:  663:        (*z)=(*z)-1;} }
        -:  664:
    #####:  665:void cardEffect_council_room(struct gameState* state, int currentPlayer, int handPos){
        -:  666:    //+4 Cards
        -:  667:    int i;
    #####:  668:    for (i = 0; i < 4; i++)
        -:  669:    {
    #####:  670:        drawCard(currentPlayer, state);
        -:  671:    }
        -:  672:
        -:  673:    //+1 Buy
    #####:  674:    state->numBuys++;
        -:  675:
        -:  676:    //Each other player draws a card
    #####:  677:    for (i = 0; i < state->numPlayers; i++)
        -:  678:    {
    #####:  679:        if ( i != currentPlayer )
        -:  680:        {
    #####:  681:            drawCard(i, state);
        -:  682:        }
        -:  683:    }
        -:  684:
        -:  685:    //put played card in played card pile
    #####:  686:    discardCard(handPos, currentPlayer, state, 0);
        -:  687:
        -:  688:    //return 0;
    #####:  689:}
        -:  690:
    #####:  691:void cardEffect_feast(struct gameState* state, int currentPlayer, int* temphand, int choice1){
        -:  692:    //gain card with cost up to 5
        -:  693:    //Backup hand
        -:  694:    int i;
    #####:  695:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  696:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  697:        state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  698:    }
        -:  699:    //Backup hand
        -:  700:
        -:  701:    //Update Coins for Buy
    #####:  702:    updateCoins(currentPlayer, state, 5);
    #####:  703:    int x = 1;//Condition to loop on
    #####:  704:    while( x == 1) {//Buy one card
    #####:  705:        if (supplyCount(choice1, state) <= 0){
        -:  706:            if (DEBUG)
        -:  707:                printf("None of that card left, sorry!\n");
        -:  708:
        -:  709:            if (DEBUG){
        -:  710:                printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  711:            }
        -:  712:        }
    #####:  713:        else if (state->coins < getCost(choice1)){
    #####:  714:            printf("That card is too expensive!\n");
        -:  715:
        -:  716:            if (DEBUG){
        -:  717:                printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  718:            }
        -:  719:        }
        -:  720:        else{
        -:  721:
        -:  722:            if (DEBUG){
        -:  723:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  724:            }
        -:  725:
    #####:  726:            gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  727:            x = 0;//No more buying cards
        -:  728:
        -:  729:            if (DEBUG){
        -:  730:                printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  731:            }
        -:  732:
        -:  733:        }
        -:  734:    }     
        -:  735:
        -:  736:    //Reset Hand
    #####:  737:    for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  738:        state->hand[currentPlayer][i] = temphand[i];
    #####:  739:        temphand[i] = -1;
        -:  740:    }
        -:  741:    //Reset Hand
        -:  742:
        -:  743:    //return 0;
    #####:  744:}
        -:  745:
    #####:  746:int cardEffect_mine(struct gameState* state, int currentPlayer, int choice1, int choice2, int handPos){
        -:  747:    int i;
    #####:  748:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  749:
    #####:  750:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  751:    {
    #####:  752:        return -1;
        -:  753:    }
        -:  754:
    #####:  755:    if (choice2 > treasure_map || choice2 < curse)
        -:  756:    {
    #####:  757:        return -1;
        -:  758:    }
        -:  759:
    #####:  760:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  761:    {
    #####:  762:        return -1;
        -:  763:    }
        -:  764:
    #####:  765:    gainCard(choice2, state, 2, currentPlayer);
        -:  766:
        -:  767:    //discard card from hand
    #####:  768:    discardCard(handPos, currentPlayer, state, 0);
        -:  769:
        -:  770:    //discard trashed card
    #####:  771:    for (i = 1; i < state->handCount[currentPlayer]; i++)
        -:  772:    {
    #####:  773:        if (state->hand[currentPlayer][i] == j)
        -:  774:        {
    #####:  775:            discardCard(i, currentPlayer, state, 0);			
    #####:  776:            break;
        -:  777:        }
        -:  778:    }
        -:  779:
    #####:  780:    return 0;
        -:  781:}
        -:  782:
    #####:  783:int cardEffect_remodel(struct gameState* state, int currentPlayer, int choice1, int choice2, int handPos){
        -:  784:    int i;
    #####:  785:    int j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  786:
    #####:  787:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  788:    {
    #####:  789:        return -1;
        -:  790:    }
        -:  791:
    #####:  792:    gainCard(choice2, state, 0, currentPlayer);
        -:  793:
        -:  794:    //discard card from hand
    #####:  795:    discardCard(handPos, currentPlayer, state, 0);
        -:  796:
        -:  797:    //discard trashed card
    #####:  798:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  799:    {
    #####:  800:        if (state->hand[currentPlayer][i] != j)
        -:  801:        {
    #####:  802:            discardCard(i, currentPlayer, state, 0);			
    #####:  803:            break;
        -:  804:        }
        -:  805:    }
        -:  806:
        -:  807:
    #####:  808:    return 0;
        -:  809:
        -:  810:
        -:  811:}
        -:  812:
    #####:  813:int cardEffect_smithy(struct gameState* state, int currentPlayer, int handPos){
        -:  814:    //+3 Cards
        -:  815:    int i;
    #####:  816:    for (i = 0; i < 3; i++)
        -:  817:    {
    #####:  818:        drawCard(currentPlayer, state);
        -:  819:    }
        -:  820:
        -:  821:    //discard card from hand
    #####:  822:    discardCard(handPos, currentPlayer, state, 0);
    #####:  823:    return 0;
        -:  824:}
        -:  825:
        2:  826:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  827:{
        -:  828:    int i;
        -:  829:    int j;
        -:  830:    int k;
        -:  831:    //int x;
        -:  832:    int index;
        2:  833:    int currentPlayer = whoseTurn(state);
        2:  834:    int nextPlayer = currentPlayer + 1;
        -:  835:
        2:  836:    int tributeRevealedCards[2] = {-1, -1};
        -:  837:    int temphand[MAX_HAND];// moved above the if statement
        2:  838:    int drawntreasure=0;
        2:  839:    int cardDrawn = 0;
        2:  840:    int z = 0;// this is the counter for the temp hand
        2:  841:    if (nextPlayer > (state->numPlayers - 1)){
    #####:  842:        nextPlayer = 0;
        -:  843:    }
        -:  844:
        -:  845:
        -:  846:    //uses switch to select card and perform actions
        2:  847:    switch( card ) 
        -:  848:    {
        -:  849:        case adventurer:
    #####:  850:            cardEffect_adventurer(state, &drawntreasure, currentPlayer, cardDrawn, temphand, &z);
    #####:  851:            return 0;
        -:  852:        case council_room:
    #####:  853:            cardEffect_council_room(state, currentPlayer, handPos);
    #####:  854:            return 0;
        -:  855:        case feast:
    #####:  856:            cardEffect_feast(state, currentPlayer, temphand, choice1);
    #####:  857:            return 0;
        -:  858:        case gardens:
    #####:  859:            return -1;
        -:  860:        case mine:
    #####:  861:            return cardEffect_mine(state, currentPlayer, choice1, choice2, handPos);
        -:  862:        case remodel:
    #####:  863:            return cardEffect_remodel(state, currentPlayer, choice1, choice2, handPos);
        -:  864:        case smithy:
    #####:  865:            return cardEffect_smithy(state, currentPlayer, handPos);
        -:  866:
        -:  867:        case village:
        -:  868:            //+1 Card
        1:  869:            drawCard(currentPlayer, state);
        -:  870:
        -:  871:            //+2 Actions
        1:  872:            state->numActions = state->numActions + 2;
        -:  873:
        -:  874:            //discard played card from hand
        1:  875:            discardCard(handPos, currentPlayer, state, 0);
        1:  876:            return 0;
        -:  877:
        -:  878:        case baron:
    #####:  879:            state->numBuys++;//Increase buys by 1!
    #####:  880:            if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  881:                int p = 0;//Iterator for hand!
    #####:  882:                int card_not_discarded = 1;//Flag for discard set!
    #####:  883:                while(card_not_discarded){
    #####:  884:                    if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  885:                        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  886:                        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  887:                        state->discardCount[currentPlayer]++;
    #####:  888:                        for (;p < state->handCount[currentPlayer]; p++){
    #####:  889:                            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  890:                        }
    #####:  891:                        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  892:                        state->handCount[currentPlayer]--;
    #####:  893:                        card_not_discarded = 0;//Exit the loop
        -:  894:                    }
    #####:  895:                    else if (p > state->handCount[currentPlayer]){
        -:  896:                        if(DEBUG) {
        -:  897:                            printf("No estate cards in your hand, invalid choice\n");
        -:  898:                            printf("Must gain an estate if there are any\n");
        -:  899:                        }
    #####:  900:                        if (supplyCount(estate, state) > 0){
    #####:  901:                            gainCard(estate, state, 0, currentPlayer);
    #####:  902:                            state->supplyCount[estate]--;//Decrement estates
    #####:  903:                            if (supplyCount(estate, state) == 0){
    #####:  904:                                isGameOver(state);
        -:  905:                            }
        -:  906:                        }
    #####:  907:                        card_not_discarded = 0;//Exit the loop
        -:  908:                    }
        -:  909:
        -:  910:                    else{
    #####:  911:                        p++;//Next card
        -:  912:                    }
        -:  913:                }
        -:  914:            }
        -:  915:
        -:  916:            else{
    #####:  917:                if (supplyCount(estate, state) > 0){
    #####:  918:                    gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  919:                    state->supplyCount[estate]--;//Decrement Estates
    #####:  920:                    if (supplyCount(estate, state) == 0){
    #####:  921:                        isGameOver(state);
        -:  922:                    }
        -:  923:                }
        -:  924:            }
        -:  925:
        -:  926:
    #####:  927:            return 0;
        -:  928:
        -:  929:        case great_hall:
        -:  930:            //+1 Card
    #####:  931:            drawCard(currentPlayer, state);
        -:  932:
        -:  933:            //+1 Actions
    #####:  934:            state->numActions++;
        -:  935:
        -:  936:            //discard card from hand
    #####:  937:            discardCard(handPos, currentPlayer, state, 0);
    #####:  938:            return 0;
        -:  939:
        -:  940:        case minion:
        -:  941:            //+1 action
    #####:  942:            state->numActions++;
        -:  943:
        -:  944:            //discard card from hand
    #####:  945:            discardCard(handPos, currentPlayer, state, 0);
        -:  946:
    #####:  947:            if (choice1)		//+2 coins
        -:  948:            {
    #####:  949:                state->coins = state->coins + 2;
        -:  950:            }
        -:  951:
    #####:  952:            else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  953:            {
        -:  954:                //discard hand
    #####:  955:                while(numHandCards(state) > 0)
        -:  956:                {
    #####:  957:                    discardCard(handPos, currentPlayer, state, 0);
        -:  958:                }
        -:  959:
        -:  960:                //draw 4
    #####:  961:                for (i = 0; i < 4; i++)
        -:  962:                {
    #####:  963:                    drawCard(currentPlayer, state);
        -:  964:                }
        -:  965:
        -:  966:                //other players discard hand and redraw if hand size > 4
    #####:  967:                for (i = 0; i < state->numPlayers; i++)
        -:  968:                {
    #####:  969:                    if (i != currentPlayer)
        -:  970:                    {
    #####:  971:                        if ( state->handCount[i] > 4 )
        -:  972:                        {
        -:  973:                            //discard hand
    #####:  974:                            while( state->handCount[i] > 0 )
        -:  975:                            {
    #####:  976:                                discardCard(handPos, i, state, 0);
        -:  977:                            }
        -:  978:
        -:  979:                            //draw 4
    #####:  980:                            for (j = 0; j < 4; j++)
        -:  981:                            {
    #####:  982:                                drawCard(i, state);
        -:  983:                            }
        -:  984:                        }
        -:  985:                    }
        -:  986:                }
        -:  987:
        -:  988:            }
    #####:  989:            return 0;
        -:  990:
        -:  991:        case steward:
    #####:  992:            if (choice1 == 1)
        -:  993:            {
        -:  994:                //+2 cards
    #####:  995:                drawCard(currentPlayer, state);
    #####:  996:                drawCard(currentPlayer, state);
        -:  997:            }
    #####:  998:            else if (choice1 == 2)
        -:  999:            {
        -: 1000:                //+2 coins
    #####: 1001:                state->coins = state->coins + 2;
        -: 1002:            }
        -: 1003:            else
        -: 1004:            {
        -: 1005:                //trash 2 cards in hand
    #####: 1006:                discardCard(choice2, currentPlayer, state, 1);
    #####: 1007:                discardCard(choice3, currentPlayer, state, 1);
        -: 1008:            }
        -: 1009:
        -: 1010:            //discard card from hand
    #####: 1011:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1012:            return 0;
        -: 1013:
        -: 1014:        case tribute:
    #####: 1015:            if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1016:                if (state->deckCount[nextPlayer] > 0){
    #####: 1017:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1018:                    state->deckCount[nextPlayer]--;
        -: 1019:                }
    #####: 1020:                else if (state->discardCount[nextPlayer] > 0){
    #####: 1021:                    tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1022:                    state->discardCount[nextPlayer]--;
        -: 1023:                }
        -: 1024:                else{
        -: 1025:                    //No Card to Reveal
        -: 1026:                    if (DEBUG){
        -: 1027:                        printf("No cards to reveal\n");
        -: 1028:                    }
        -: 1029:                }
        -: 1030:            }
        -: 1031:
        -: 1032:            else{
    #####: 1033:                if (state->deckCount[nextPlayer] == 0){
    #####: 1034:                    for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1035:                        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1036:                        state->deckCount[nextPlayer]++;
    #####: 1037:                        state->discard[nextPlayer][i] = -1;
    #####: 1038:                        state->discardCount[nextPlayer]--;
        -: 1039:                    }
        -: 1040:
    #####: 1041:                    shuffle(nextPlayer,state);//Shuffle the deck
        -: 1042:                } 
    #####: 1043:                tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1044:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1045:                state->deckCount[nextPlayer]--;
    #####: 1046:                tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1047:                state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1048:                state->deckCount[nextPlayer]--;
        -: 1049:            }    
        -: 1050:
    #####: 1051:            if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1052:                state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1053:                state->playedCardCount++;
    #####: 1054:                tributeRevealedCards[1] = -1;
        -: 1055:            }
        -: 1056:
    #####: 1057:            for (i = 0; i <= 2; i ++){
    #####: 1058:                if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1059:                    state->coins += 2;
        -: 1060:                }
        -: 1061:
    #####: 1062:                else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1063:                    drawCard(currentPlayer, state);
    #####: 1064:                    drawCard(currentPlayer, state);
        -: 1065:                }
        -: 1066:                else{//Action Card
    #####: 1067:                    state->numActions = state->numActions + 2;
        -: 1068:                }
        -: 1069:            }
        -: 1070:
    #####: 1071:            return 0;
        -: 1072:
        -: 1073:        case ambassador:
    #####: 1074:            j = 0;		//used to check if player has enough cards to discard
        -: 1075:
    #####: 1076:            if (choice2 > 2 || choice2 < 0)
        -: 1077:            {
    #####: 1078:                return -1;				
        -: 1079:            }
        -: 1080:
    #####: 1081:            if (choice1 == handPos)
        -: 1082:            {
    #####: 1083:                return -1;
        -: 1084:            }
        -: 1085:
    #####: 1086:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1087:            {
    #####: 1088:                if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1089:                {
    #####: 1090:                    j++;
        -: 1091:                }
        -: 1092:            }
    #####: 1093:            if (j < choice2)
        -: 1094:            {
    #####: 1095:                return -1;				
        -: 1096:            }
        -: 1097:
        -: 1098:            if (DEBUG) 
        -: 1099:                printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1100:
        -: 1101:            //increase supply count for choosen card by amount being discarded
    #####: 1102:            state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1103:
        -: 1104:            //each other player gains a copy of revealed card
    #####: 1105:            for (i = 0; i < state->numPlayers; i++)
        -: 1106:            {
    #####: 1107:                if (i != currentPlayer)
        -: 1108:                {
    #####: 1109:                    gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1110:                }
        -: 1111:            }
        -: 1112:
        -: 1113:            //discard played card from hand
    #####: 1114:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1115:
        -: 1116:            //trash copies of cards returned to supply
    #####: 1117:            for (j = 0; j < choice2; j++)
        -: 1118:            {
    #####: 1119:                for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1120:                {
    #####: 1121:                    if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1122:                    {
    #####: 1123:                        discardCard(i, currentPlayer, state, 1);
    #####: 1124:                        break;
        -: 1125:                    }
        -: 1126:                }
        -: 1127:            }			
        -: 1128:
    #####: 1129:            return 0;
        -: 1130:
        -: 1131:        case cutpurse:
        -: 1132:
    #####: 1133:            updateCoins(currentPlayer, state, 2);
    #####: 1134:            for (i = 0; i < state->numPlayers; i++)
        -: 1135:            {
    #####: 1136:                if (i != currentPlayer)
        -: 1137:                {
    #####: 1138:                    for (j = 0; j < state->handCount[i]; j++)
        -: 1139:                    {
    #####: 1140:                        if (state->hand[i][j] == copper)
        -: 1141:                        {
    #####: 1142:                            discardCard(j, i, state, 0);
    #####: 1143:                            break;
        -: 1144:                        }
    #####: 1145:                        if (j == state->handCount[i])
        -: 1146:                        {
    #####: 1147:                            for (k = 0; k < state->handCount[i]; k++)
        -: 1148:                            {
        -: 1149:                                if (DEBUG)
        -: 1150:                                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1151:                            }	
    #####: 1152:                            break;
        -: 1153:                        }		
        -: 1154:                    }
        -: 1155:
        -: 1156:                }
        -: 1157:
        -: 1158:            }				
        -: 1159:
        -: 1160:            //discard played card from hand
    #####: 1161:            discardCard(handPos, currentPlayer, state, 0);			
        -: 1162:
    #####: 1163:            return 0;
        -: 1164:
        -: 1165:
        -: 1166:        case embargo: 
        -: 1167:            //+2 Coins
    #####: 1168:            state->coins = state->coins + 2;
        -: 1169:
        -: 1170:            //see if selected pile is in play
    #####: 1171:            if ( state->supplyCount[choice1] == -1 )
        -: 1172:            {
    #####: 1173:                return -1;
        -: 1174:            }
        -: 1175:
        -: 1176:            //add embargo token to selected supply pile
    #####: 1177:            state->embargoTokens[choice1]++;
        -: 1178:
        -: 1179:            //trash card
    #####: 1180:            discardCard(handPos, currentPlayer, state, 1);		
    #####: 1181:            return 0;
        -: 1182:
        -: 1183:        case outpost:
        -: 1184:            //set outpost flag
    #####: 1185:            state->outpostPlayed++;
        -: 1186:
        -: 1187:            //discard card
    #####: 1188:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1189:            return 0;
        -: 1190:
        -: 1191:        case salvager:
        -: 1192:            //+1 buy
    #####: 1193:            state->numBuys++;
        -: 1194:
    #####: 1195:            if (choice1)
        -: 1196:            {
        -: 1197:                //gain coins equal to trashed card
    #####: 1198:                state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1199:                //trash card
    #####: 1200:                discardCard(choice1, currentPlayer, state, 1);	
        -: 1201:            }
        -: 1202:
        -: 1203:            //discard card
    #####: 1204:            discardCard(handPos, currentPlayer, state, 0);
    #####: 1205:            return 0;
        -: 1206:
        -: 1207:        case sea_hag:
    #####: 1208:            for (i = 0; i < state->numPlayers; i++){
    #####: 1209:                if (i != currentPlayer){
    #####: 1210:                    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1211:                    state->discardCount[i]++;
    #####: 1212:                    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1213:                }
        -: 1214:            }
    #####: 1215:            return 0;
        -: 1216:
        -: 1217:        case treasure_map:
        -: 1218:            //search hand for another treasure_map
    #####: 1219:            index = -1;
    #####: 1220:            for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1221:            {
    #####: 1222:                if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1223:                {
    #####: 1224:                    index = i;
    #####: 1225:                    break;
        -: 1226:                }
        -: 1227:            }
    #####: 1228:            if (index > -1)
        -: 1229:            {
        -: 1230:                //trash both treasure cards
    #####: 1231:                discardCard(handPos, currentPlayer, state, 1);
    #####: 1232:                discardCard(index, currentPlayer, state, 1);
        -: 1233:
        -: 1234:                //gain 4 Gold cards
    #####: 1235:                for (i = 0; i < 4; i++)
        -: 1236:                {
    #####: 1237:                    gainCard(gold, state, 1, currentPlayer);
        -: 1238:                }
        -: 1239:
        -: 1240:                //return success
    #####: 1241:                return 1;
        -: 1242:            }
        -: 1243:
        -: 1244:            //no second treasure_map found in hand
    #####: 1245:            return -1;
        -: 1246:    }
        -: 1247:
        1: 1248:    return -1;
        -: 1249:}
        -: 1250:
        1: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:
        -: 1254:    //if card is not trashed, added to Played pile 
        1: 1255:    if (trashFlag < 1)
        -: 1256:    {
        -: 1257:        //add card to played pile
        1: 1258:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1259:        state->playedCardCount++;
        -: 1260:    }
        -: 1261:
        -: 1262:    //set played card to -1
        1: 1263:    state->hand[currentPlayer][handPos] = -1;
        -: 1264:
        -: 1265:    //remove card from player's hand
        1: 1266:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1267:    {
        -: 1268:        //reduce number of cards in hand
    #####: 1269:        state->handCount[currentPlayer]--;
        -: 1270:    }
        1: 1271:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:        //reduce number of cards in hand
    #####: 1274:        state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:    else 	
        -: 1277:    {
        -: 1278:        //replace discarded card with last card in hand
        1: 1279:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:        //set last card to -1
        1: 1281:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:        //reduce number of cards in hand
        1: 1283:        state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:
        1: 1286:    return 0;
        -: 1287:}
        -: 1288:
        3: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:    //Note: supplyPos is enum of choosen card
        -: 1292:
        -: 1293:    //check if supply pile is empty (0) or card is not used in game (-1)
        3: 1294:    if ( supplyCount(supplyPos, state) < 1 )
        -: 1295:    {
    #####: 1296:        return -1;
        -: 1297:    }
        -: 1298:
        -: 1299:    //added card for [whoseTurn] current player:
        -: 1300:    // toFlag = 0 : add to discard
        -: 1301:    // toFlag = 1 : add to deck
        -: 1302:    // toFlag = 2 : add to hand
        -: 1303:
        3: 1304:    if (toFlag == 1)
        -: 1305:    {
    #####: 1306:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:        state->deckCount[player]++;
        -: 1308:    }
        3: 1309:    else if (toFlag == 2)
        -: 1310:    {
    #####: 1311:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:        state->handCount[player]++;
        -: 1313:    }
        -: 1314:    else
        -: 1315:    {
        3: 1316:        state->discard[player][ state->discardCount[player] ] = supplyPos;
        3: 1317:        state->discardCount[player]++;
        -: 1318:    }
        -: 1319:
        -: 1320:    //decrease number in supply pile
        3: 1321:    state->supplyCount[supplyPos]--;
        -: 1322:
        3: 1323:    return 0;
        -: 1324:}
        -: 1325:
        7: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:    int i;
        -: 1329:
        -: 1330:    //reset coin count
        7: 1331:    state->coins = 0;
        -: 1332:
        -: 1333:    //add coins for each Treasure card in player's hand
       42: 1334:    for (i = 0; i < state->handCount[player]; i++)
        -: 1335:    {
       35: 1336:        if (state->hand[player][i] == copper)
        -: 1337:        {
       28: 1338:            state->coins += 1;
        -: 1339:        }
        7: 1340:        else if (state->hand[player][i] == silver)
        -: 1341:        {
    #####: 1342:            state->coins += 2;
        -: 1343:        }
        7: 1344:        else if (state->hand[player][i] == gold)
        -: 1345:        {
    #####: 1346:            state->coins += 3;
        -: 1347:        }	
        -: 1348:    }	
        -: 1349:
        -: 1350:    //add bonus
        7: 1351:    state->coins += bonus;
        -: 1352:
        7: 1353:    return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of dominion.c
        -: 1358:
