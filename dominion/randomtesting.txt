To develop the testers, I started by creating a completely randomized test state a set number of times (MAX_TESTS). When tests did not pass, I first made sure that they should not be passing by looking through the code. For example, the number of buys and cards are not correctly decremented between cards being played, this caused most tests to inherently fail. Within the loop, I simply checked if a few conditions were met, and if they were not, I would document that instance as a fail. I counted the numbers of fails and passes for eachtest, and I report that to the user. All of my tests achieved 100% statement coverage for their respective functions, with very little runtime. However for the overall code, the line coverage was fairly even with the unit tests from last assignment (Since both tests simply used 3 cards and other necessary functions). My first tests achieved ~73% coverage, while the new tests can range (due to the randomized playing card factor) from ~65% to ~75% on average, depending on the size of the code for therandom cards called. The better fault detection goes to the random testing, because the random tests can show me that a test may pass/fail a certain percentage of the time, and can show methe types of inputs that cause it to fail. The unit tests do not offer the detail of a failing tests that random tests seem to. 
